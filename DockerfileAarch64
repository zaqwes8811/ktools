FROM ubuntu:22.04

ENV QEMU_VERSION=9.2.4
ENV NG_TAG=tags/crosstool-ng-1.27.0
ENV NG_BIN=/opt/crosstool-ng-root/
ENV ARCH=arm64
ENV CROSS_COMPILE=aarch64-unknown-linux-gnu-

# Used stock kernel
ENV KERNEL_MAJOR=6
ENV KERNEL_VERSION=$KERNEL_MAJOR.1.68
ENV ROOTFS_ROOT=/opt/busybox/_install/
ENV BUSYBOX_TAG=tags/1_36_0

RUN apt-get update && apt-get install -y gcc g++ gperf bison flex texinfo help2man make libncurses5-dev \
    python3-dev autoconf automake libtool libtool-bin gawk wget bzip2 xz-utils unzip \
    patch libstdc++6 rsync git meson ninja-build dos2unix \
    libmpc-dev libgmp3-dev \
    bc \
    python3-venv python3-pip \
    pkg-config libglib2.0-dev libpixman-1-dev \
    cpio \
    device-tree-compiler libssl-dev && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

RUN pip3 install tomli

# From source code
WORKDIR /opt/

RUN chmod -R 777 /opt/

# Need for build toolchain
RUN useradd -m builder
ENV HOME=/home/builder

USER builder

RUN mkdir ~/src && cd ~/src/ && wget https://zlib.net/fossils/zlib-1.2.12.tar.gz

RUN git clone https://github.com/crosstool-ng/crosstool-ng.git \
    && cd crosstool-ng && git checkout $NG_TAG -b ct-ng \
    && find . -type f -exec dos2unix {} \; \
    && ./bootstrap && ./configure --prefix=$NG_BIN \
    && make install \
    && $NG_BIN/bin/ct-ng aarch64-unknown-linux-gnu \
    && CT_PARALLEL_JOBS=2 $NG_BIN/bin/ct-ng build \
    && cd .. && rm -rf crosstool-ng

USER root

# Qemu
WORKDIR /opt/
RUN mkdir tools && cd tools \
    && wget https://download.qemu.org/qemu-$QEMU_VERSION.tar.xz \
    && tar xvJf qemu-$QEMU_VERSION.tar.xz && rm qemu-$QEMU_VERSION.tar.xz

RUN cd tools/qemu-$QEMU_VERSION && ./configure --target-list="aarch64-softmmu" --enable-virtfs \
    && make

ENV PATH="$PATH:$NG_BIN/bin"
ENV PATH="$PATH:/opt/tools/qemu-$QEMU_VERSION/build/qemu-bundle/usr/local/bin"
ENV PATH="$PATH:$HOME/x-tools/aarch64-unknown-linux-gnu/bin"

RUN wget https://cdn.kernel.org/pub/linux/kernel/v$KERNEL_MAJOR.x/linux-$KERNEL_VERSION.tar.xz

# Rootfs
USER builder
RUN git clone git://busybox.net/busybox.git && cd busybox && git checkout $BUSYBOX_TAG -b bb \
    && make defconfig \
    && tar -xvf /opt/linux-$KERNEL_VERSION.tar.xz -C /tmp/ \
    && /tmp/linux-$KERNEL_VERSION/scripts/config --disable CONFIG_TC \
    && make && make install \
    && rm -rf /tmp/linux-$KERNEL_VERSION

# Full rootfs with files and folders
RUN cd $ROOTFS_ROOT && mkdir -p bin dev etc home lib lib64 proc sbin sys tmp usr var \
    && mkdir -p usr/bin usr/lib usr/sbin var/log \
    && export SYSROOT=$(aarch64-unknown-linux-gnu-gcc -print-sysroot) \
    && cp $SYSROOT/lib/ld-linux-aarch64.so.1 lib64 \
    && cp $SYSROOT/lib/ld-linux-aarch64.so.1 lib \
    && cp $SYSROOT/lib/libm.so.6 lib64 \
    && cp $SYSROOT/lib/libresolv.so.2 lib64 \
    && cp $SYSROOT/lib/libc.so.6 lib64
USER root

# DTB
ENV QEMU_AARCH64_CALL_PREFIX="qemu-system-aarch64 -machine virt,gic_version=3 -cpu cortex-a72 -machine type=virt -smp 4 -m 256"

RUN $QEMU_AARCH64_CALL_PREFIX -display none -machine dumpdtb=virt-gicv3.dtb \
    && dtc -I dtb -O dts  -f virt-gicv3.dtb -o virt-gicv3.dtsi

ENV KERNEL_SRC=$HOME/workdir/linux-$KERNEL_VERSION

WORKDIR $HOME
